package calculation_report

/**
 * Created by noko on 2015/09/12.
 */
public class AccurateNumber {
    public static BigDecimal sqrt3() {
        String numStr = "1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232650153123432669033228866506722546689218379712270471316603678615880190499865373798593894676503475065760507566183481296061009476021871903250831458295239598329977898245082887144638329173472241639845878553976679580638183536661108431737808943783161020883055249016700235207111442886959909563657970871684980728994932964842830207864086039887386975375823173178313959929830078387028770539133695633121037072640192491067682311992883756411414220167427521023729942708310598984594759876642888977961478379583902288548529035760338528080643819723446610596897228728652641538226646984200211954841552784411812865345070351916500166892944154808460712771439997629268346295774383618951101271486387469765459824517885509753790138806649619119622229571105552429237231921977382625616314688420328537166829386496119170497388363954959381457576718533736331259108996554246248347871976052359977691923235702203053028403859154149710724295592067062025095201759631858727663599752836634310801506658537106473285386259222605822205104036802702975047987280794616581004170526819400190957334621759438936702493204226910343698124637201111852610842689102997203112021000635071763745824052038475551972799337976149061078949855442233260040188513036315611448868472815892881632451872650666453848775991625766428721112408420680167635171001029431807155151909616424609070394081292169035174929613640041396704310412536323270309225773279602923765977455370954691157421404242307819923276174019064245124548775168626961053336942162136053946042456541401285330078136334498567364067039773422298119610429255345016014059404795471545345484072717376562623665491666402330060132657440701078368584684523131604677544805004022406399119703622186029202388671507110171694002968687596635000408953162142334252279568340670134701859020283607167621477434934495635958080821304425864694685226";
        return numStr.toBigDecimal()
    }

    public static BigDecimal relativeError(BigDecimal trueNumber, BigDecimal approximate) {
        trueNumber.subtract(approximate).divide(trueNumber, 200, BigDecimal.ROUND_HALF_UP)
    }

    public static BigDecimal relativeErrorWithSqrt3(BigDecimal approximate) {
        relativeError(sqrt3(), approximate)
    }
    public static BigDecimal relativeErrorWithSqrt3(BigRational approximate) {
        relativeErrorWithSqrt3(approximate.toBigDecimal())
    }
    public static BigDecimal relativeErrorWithSqrt3(Rational approximate) {
        relativeErrorWithSqrt3(approximate.toBigDecimal())
    }
    public static BigDecimal relativeErrorWithSqrt3(double approximate) {
        relativeErrorWithSqrt3(new BigDecimal(approximate))
    }

}