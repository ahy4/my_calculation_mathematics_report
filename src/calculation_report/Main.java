package calculation_report;

import CalculationForTest.BaseConversion;

import static calculation_report.Rational.ONE;
import static java.lang.Math.*;

import static calculation_report.Rational.r;
import static calculation_report.BigRational.br;

/**
 * Created by noko on 2015/09/03.
 */
public class Main {

    public static void main(String[] args) {
        BisectionMethod.execute(
            BigRational.class,
            x -> x.power(3).minus(x.multiply(3)),
            1, 2
        );
    }


    public static void testClient01() {
        NewtonMethod.newtonMethod(
            // f(x) = log(1+x) - 1
            x -> myLog(x).minus(r(1)),
            // f'(x) = 1 / (1+x)
            x -> myLogPrime(x),
            r(0)
        );
    }
    public static void testClient02() {
        NewtonMethod.newtonMethod(
            // f(x) = log(1+x) - 1
            x -> r(myLog(x).minus(r(1)).toDouble()),
            // f'(x) = 1 / (1+x)
            x -> r((myLogPrime(x)).toDouble()),
            r(0)
        );
    }

    public static void testClient03() {
        NewtonMethod.newtonMethod(
            x -> x.power(3).minus(x.multiply(3)),
            x -> x.power(2).multiply(3).minus(r(3)),
            r(1.7)
        );
        /**
         * 17 / 10
         * 4913 / 2835
         * 118587876497 / 68466712860
         * -8360424323152616067 / 7172706093606712940
         * 7530009178521165813 / 592546012130790706
         * 2876483854751834413 / 552441121428824999
         * -496114619338093959 / 656096119811379685
         *
         * ３
         * 絶対誤差: -7.47753885429800410529115329528...*10^-7
         * 相対誤差: -4.31715907040483849824607517932...*10^-7
         */

        NewtonMethod.newtonMethod(
            // f(x) = x^2 + 3x + 2
            x -> x*x*x - 3*x,
            // f'(x) = 2x
            x -> 3*x*x - 3,
            1.7
        );
        /**
         * 1.7
         * 1.7329805996472663
         * 1.7320515553227627
         * 1.7320508075693617
         * 1.7320508075688772
         * 1.7320508075688774
         * 1.7320508075688772
         *
         * ３
         * 絶対誤差: -7.47754*10^-7
         * 相対誤差: -4.31716*10^-7
         *
         * ４
         * 4.8440647255365849412763305719474618961937194419...*10^-13
         *
         * 最大
         * 4.845013279464183*10^-13
         */

        NewtonMethod.newtonMethod(
            x -> x.power(3).minus(x.multiply(3)),
            x -> x.power(2).multiply(3).minus(br(3)),
            br(1.7)
        );
        /**
         * 17 / 10
         * 4913 / 2835
         * 118587876497 / 68466712860
         * 1667711322168688287513535727415473 / 962853580784409697902231814529610
         * 4638340549812103886046405455860613539726667862420609462303646857662236460371202960637786828872428817 / 2677947165027174950876742912797935119050197173333083394158104587748003120892403711916871427563002035
         * 99790200431681234586114646553260305069935739269682807096853528779455806683650411925948611023658963921431956092513486968546632809430455788061841111813983598437207375626881414087411122068224993891885160938311847212910096538988349904950369658143856280434065054938152593562581977458753647104252809214513 / 57613899081717869957924137621056382649066414595805196559717740160770422013120444202674370465982734352251590206868238063982940684593413567538239240759817889601486577676266727585497124050452851051098574335366689517040631357686799388773767508216450457821367475006123555238927787780067624961333771400860
         * 993719208473588870256524364475628854865705529098905271682791959163164676614765991342677064557059527393738586456613941540079297804204102822461205924845867604579709431925987569555412716708821990735193227037518174524066494823492044762888856846223032042483877509283216399901731749507452381714489214255527113381811773261596784210261177865867422054728941643640821056447331905914790147625905502428846192179521311557272120587462343736725154642605245129633864296520254638034114690317674563295822701241484604207789899258579048615320644932097470913850813805081232583266188180437769961310724581013712208476886736125100342029688571969061160730752683146198450405543118608090082724139457280090128221356412747657377586899979436846276919659668784678107548125716289650021493573590055662676319372429309027296784716746159903677435366604237289213449339266543835889779098521633622406577824757000932738513610296296503697 / 573724052511128378252240927335046872925421698005987207948218044282052424848069303861306190753957511434368546112860141943631831354065057298430759978214214324229138891140702501888321428061974821189985736202361112311500111445455280334850474603288254071351552731741419280507396692875629565382166334778698131844325256364822337078447589980084475912849352727227749942480192403453012008063735762214000764457406467425225490717452383535611744259195127405505616699735062908852254919671316652957575080374593259144435159819187414267529190359810632134859830410195800818964862379186554551780729592012884390206406847774264097278495486596728321049080374718216521578515403222970691443127790022057753010222892246682419443057316126496282736398873311640782355422289250232922215246783221735735011737380840319171266319278624260656997140041435363551166873208649810127743237553562459200770293209361031378577293522592864010
         *
         * ４
         * 4.84225382558862933451258039248869166682646231687...*10^-13
         *
         * 最大
         * 1.1043197247885102986657372421813901899159*10^-99
         * 6.375792903780598611194877828234296739732*10^-100
         */
    }

    public static long factorial(long n) {
        long fact = 1;
        for (int i = 1; i <= n; i++) {
            fact *= i;
        }
        return fact;
//        return n == 0 ? 1 : n * factorial(n-1);
    }

    public static Rational sum(NumericalSequence nth) {
        Rational sum = Rational.ZERO;
        for (int i = 1; i <= 3; i++) {
            sum = sum.plus(nth.apply(i));
        }
        return sum;
    }

    // return log(1 + x) (= sum((-1)^(n+1) * x^n / n) )
    public static Rational myLog(Rational x) {
        return sum(
            n -> x.power(n)
                .multiply(r(
                    (long) pow(-1, n + 1),
                    n
                ))
        );
    }

    // return 1 / (1 + x)
    public static Rational myLogPrime(Rational x) {
        return x.plus(ONE).inverse();
    }

    public static Rational sin(Rational x) {
        return sum(i -> x.power(2 * i - 1)
            .multiply(r((long) pow(-1, i + 1), factorial(2 * i - 1))));
    }

    public static Rational cos(Rational x) {
        return sum(i -> x.power(2 * i - 2)
            .multiply(r((long) pow(-1, i + 1), factorial(2 * i - 2))));
    }


    interface NumericalSequence {
        Rational apply(long n);
    }

}